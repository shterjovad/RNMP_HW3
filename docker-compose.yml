# docker-compose.yml
version: '3'
services:
  train_model:
    build: .
    ports:
      - 8888:8888
    volumes:
      - .:/app
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--allow-root", "--NotebookApp.token=''"]
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # this sets up kafka
  # kafka is accessible locally on localhost:9092
  # and inside the docker network on kafka:29092
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # to be able to have nice UI to view and test what in kafka
  # you can go to http://localhost:9021 in your browser to see kafka topics and messsages on them
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    depends_on:
      - kafka
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 
      PORT: 9021

  # this sets up and creates three kafka topics if they dont exist
  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    volumes:
      - .:/app
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      rm -rf /app/kafka_checkpoints
      mkdir -p /app/kafka_checkpoints
      kafka-topics --bootstrap-server kafka:29092 --list

      kafka-topics --bootstrap-server kafka:29092 --delete --topic health_data
      kafka-topics --bootstrap-server kafka:29092 --delete --topic health_data_predicted
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic health_data --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic health_data_predicted --replication-factor 1 --partitions 1
      # echo -e 'Recreating kafka topics'
      # kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic health_data --replication-factor 1 --partitions 1
      # kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic health_data_predicted --replication-factor 1 --partitions 1
  
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "


  prediction_service:
    build: .
    volumes:
      - .:/app
    ports:
      - 4040:4040
    depends_on:
      - kafka
    command: ["bash", "-c", "spark-submit --master local[*] --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /app/prediction_job.py"]

networks:
  default:
    driver: bridge